spring:
  profiles:
    default: dev # 기본 환경을 dev로

  security:
    oauth2.client:
      registration:
        google:
          clientId: ENC(bseqy4nx4e6dIS1VFu7v6Oi/oXUfM4APJDrIPkFQj12TfNiL4ube/AifsQswaVwxMpPsOEDFVRGBbclKIdyGG+fGRi+2gfeNeCPiv9detPMult5Ysc+uZw==)
          clientSecret: ENC(VJZZH16JKtnkdK6WHQknM4xr2QnnBQMMDwpc4acrdGy/Gp+FCqI99Reqr/9TjiY2)
          redirect-uri: https://hohomii.shop:8443/login/oauth2/code/google
          scope: email, profile
        naver:
          clientId: ENC(+AuHYY52/PGsDzg07Choe/xfMYEDoENtoi/s9ecgfEI=)
          clientSecret: ENC(0ugqjzOjV4QWXbn8hV7Gpd6JHDOjMchB)
#          clientAuthenticationMethod: post
          authorizationGrantType: authorization_code
          redirect-uri: https://hohomii.shop:8443/login/oauth2/code/naver
          scope: name, nickname, email, profile_image
          clientName: Naver
        kakao:
          client-id: ENC(zYEauN/dIOCsAsrZjCeptp7B2VGkRIaQeT2eiemBxkOPVsT+rUWXbotQdPfgIndB)
          client-secret: ENC(f/EoiRbGMepGr4d9w2+dhrgRheoEgAkHzfRmwuOXWfFz08TPuV8j51i1W5a+AuJo)
          client-authentication-method: POST
          authorization-grant-type: authorization_code
          redirect-uri: https://hohomii.shop:8443/login/oauth2/code/kakao
          scope:
            - account_email
            - profile_nickname
            - profile_image
          clientName: Kakao

      # Provider 설정
      provider:
        naver:
          authorizationUri: https://nid.naver.com/oauth2.0/authorize
          tokenUri: https://nid.naver.com/oauth2.0/token
          userInfoUri: https://openapi.naver.com/v1/nid/me
          userNameAttribute: response
        kakao:
          authorizationUri: https://kauth.kakao.com/oauth/authorize
          tokenUri: https://kauth.kakao.com/oauth/token
          userInfoUri: https://kapi.kakao.com/v2/user/me
          userNameAttribute: id

  # WebSocket 관련 설정
  mvc:
    websocket:
      enabled: true
  # STOMP config
  messaging:
    stomp:
      enabled: tr

  #kafka config
  kafka:
    consumer:
      bootstrap-servers: ENC(ULHxVjXF4Rmi2ZD302GSElMdX8/sVm9Jgyp8hvbUUUzzNhCQYkS9F43Fj3LpvYPXd+VDcvw7fzzJzNwBSiHuRxiHbz8R2gLg)
      group-id: chatServer${chatServerIndex}
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"

    producer:
      bootstrap-servers: ENC(ULHxVjXF4Rmi2ZD302GSElMdX8/sVm9Jgyp8hvbUUUzzNhCQYkS9F43Fj3LpvYPXd+VDcvw7fzzJzNwBSiHuRxiHbz8R2gLg)
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer






cloud:
  aws:
    credentials:
      secret-key: ENC(i/B1gm7Wm9tUXLu55Z5mjsAbh9BqzYMkfoCtcvU798LQoccIK3cicxsDCDdpRUeXgmVtGktF1yQ=)
      access-key: ENC(3wFDB1exmRXoiPVPi/lgKq+zesHQOY3aBuIdChbpq5U=)
    s3:
      bucket: ENC(yByVJRg3SqpPSDTLT+xD8RBRTSexMecj)
    region:
      static: ap-northeast-2
    stack:
      auto: 'false'

jwt:
  secret:
    key: ENC(rjg+5OS5srRHUw2KZQcREVDpUBlSXEQ4y7Hl/qE1KjNodO/mb2zH8P9bJ0mX0o81k7pPcD6EppBR6LgkE9LBrxBB35PzT/7Tjq9ja7YJAwmj5d9yLFpeLCLgcUQ8AP5HqG1c4Urael0Rqe6gVmxBbfxWOBHgmWKg+qS/w3AY7hyiFrUfLd5Xyw==)

coolsms:
  api:
    key: ENC(uYFfmuxh4hHPJCbWkYa2Ub8PGg5pFERm8jU6qjNpSsg=)
    secret: ENC(xK/tJOuANOgFBfKz1LvvHME+KhA4Ap4O9IToant9ZrWDtsy5CO9hXnyH4tUBJ/w6)


